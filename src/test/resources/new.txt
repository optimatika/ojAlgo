
==================================================
PrimalSimplexSolver-RevisedStore
==================================================


UNEXPLORED iteration 0, partition [B, B, L, L, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [4.0, 1.0, 0.0, 0.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 1]

getPrimalEnterCandidate
	2(0) -2.0 @ LOWER
		2.0 => 2(0) LOWER INCREASE
	3(1) -3.0 @ LOWER
		3.0 => 3(1) LOWER INCREASE
==>> 3(1) LOWER INCREASE

testPrimalExitRatio
	1(1) 3.0 / -2.0 = 1.5
	0(0) 4.0 / 1.0 = 4.0
Bound switch!
==>> -1(-1) INCREASE UPPER

Switching bounds: 3(1) LOWER INCREASE
==>> Column: 3.

UNEXPLORED iteration 1, partition [B, B, L, U, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [3.0, 3.0, 0.0, 1.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 1]

getPrimalEnterCandidate
	2(0) -2.0 @ LOWER
		2.0 => 2(0) LOWER INCREASE
	3(1) -3.0 @ UPPER
==>> 2(0) LOWER INCREASE

testPrimalExitRatio
	1(1) 1.0 / -1.0 = 1.0
		1.0 => 1(1) INCREASE UPPER
	0(0) 3.0 / 1.0 = 3.0
==>> 1(1) INCREASE UPPER

Pivoting: 1(1) INCREASE UPPER -> 2(0) LOWER INCREASE
==>> Row: 1, Exit: 1, Column/Enter: 2.
Cost=-2.0, Pivot1=-1.0, Pivot2=-1.0, RHS=3.0, Inf=0.0
Shift Exit: 0.0, Enter: 0.0
NEW iter: 2(0) INCREASE -> 1(1) INCREASE
Before update:
x: { 2.0, 1.0 }
y: { 1.0, -1.0 }
d: { -2.0, -3.0, 0.0, 0.0 }
a: { -1.0, -2.0, 0.0, 0.0 }
Update values:
exitX: 1.0, enterY: -1.0, stepX: -1.0
After update:
x: { 3.0, -1.0 }
y: { 1.0, -1.0 }
d: { -2.0, 1.0, 0.0, 0.0 }
a: { -1.0, -2.0, 0.0, 0.0 }

UNEXPLORED iteration 2, partition [B, U, B, U, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [3.0, 4.0, -1.0, 1.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
!!! 0.0 < -1.0 < 5.0
[0, 2]
!PF 2(1) -1.0, but [0.0,5.0]

getPrimalEnterCandidate
	1(0) -2.0 @ UPPER
	3(1) 1.0 @ UPPER
		1.0 => 3(1) UPPER DECREASE
==>> 3(1) UPPER DECREASE

testPrimalExitRatio
	2(1) 6.0 / 2.0 = 3.0
	0(0) 3.0 / -1.0 = 3.0
Bound switch!
==>> -1(-1) DECREASE LOWER

Switching bounds: 3(1) UPPER DECREASE
==>> Column: 3.

UNEXPLORED iteration 3, partition [B, U, B, L, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [1.0, 4.0, 3.0, 0.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 2]

getPrimalEnterCandidate
	1(0) -2.0 @ UPPER
	3(1) 1.0 @ LOWER
==>> -1(-1) BASIS STAY

OPTIMAL iteration 3, partition [B, U, B, L, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [1.0, 4.0, 3.0, 0.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 2]
	2(1) 0.0
	0(0) 0.0

-6.0 OPTIMAL [B, U, B, L, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [1.0, 4.0, 3.0, 0.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]

PrimalSimplexSolver-RevisedStore: OPTIMAL -6.0 @ { 1.0, 4.0, 3.0, 0.0, 0.0, 0.0 }


==================================================
PrimalSimplexSolver-DenseTableau
==================================================


UNEXPLORED iteration 0, partition [B, B, L, L, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [4.0, 1.0, 0.0, 0.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 1]
  1  0  1  1  1  0  4
  0  1 -1 -2  0  1  1
  0  0 -2 -3  0  0  0

getPrimalEnterCandidate
	2(0) -2.0 @ LOWER
		2.0 => 2(0) LOWER INCREASE
	3(1) -3.0 @ LOWER
		3.0 => 3(1) LOWER INCREASE
==>> 3(1) LOWER INCREASE

testPrimalExitRatio
	1(1) 3.0 / -2.0 = 1.5
	0(0) 4.0 / 1.0 = 4.0
Bound switch!
==>> -1(-1) INCREASE UPPER

Switching bounds: 3(1) LOWER INCREASE
==>> Column: 3.

UNEXPLORED iteration 1, partition [B, B, L, U, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [3.0, 3.0, 0.0, 1.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 1]
  1  0  1  1  1  0  3
  0  1 -1 -2  0  1  3
  0  0 -2 -3  0  0  0

getPrimalEnterCandidate
	2(0) -2.0 @ LOWER
		2.0 => 2(0) LOWER INCREASE
	3(1) -3.0 @ UPPER
==>> 2(0) LOWER INCREASE

testPrimalExitRatio
	1(1) 1.0 / -1.0 = 1.0
		1.0 => 1(1) INCREASE UPPER
	0(0) 3.0 / 1.0 = 3.0
==>> 1(1) INCREASE UPPER

Pivoting: 1(1) INCREASE UPPER -> 2(0) LOWER INCREASE
==>> Row: 1, Exit: 1, Column/Enter: 2.
Cost=-2.0, Pivot1=-1.0, Pivot2=-1.0, RHS=3.0, Inf=0.0
Shift Exit: 0.0, Enter: 0.0

UNEXPLORED iteration 2, partition [B, U, B, U, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [2.0, 4.0, 1.0, 1.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 2]
  1  1  0 -1  1  1  2
  0 -1  1  2  0 -1  1
  0 -2  0  1  0 -2 -6

getPrimalEnterCandidate
	1(0) -2.0 @ UPPER
	3(1) 1.0 @ UPPER
		1.0 => 3(1) UPPER DECREASE
==>> 3(1) UPPER DECREASE

testPrimalExitRatio
	2(1) 4.0 / 2.0 = 2.0
	0(0) 2.0 / -1.0 = 2.0
Bound switch!
==>> -1(-1) DECREASE LOWER

Switching bounds: 3(1) UPPER DECREASE
==>> Column: 3.

UNEXPLORED iteration 3, partition [B, U, B, L, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [1.0, 4.0, 3.0, 0.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 2]
  1  1  0 -1  1  1  1
  0 -1  1  2  0 -1  3
  0 -2  0  1  0 -2 -6

getPrimalEnterCandidate
	1(0) -2.0 @ UPPER
	3(1) 1.0 @ LOWER
==>> -1(-1) BASIS STAY

OPTIMAL iteration 3, partition [B, U, B, L, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [1.0, 4.0, 3.0, 0.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 2]
  1  1  0 -1  1  1  1
  0 -1  1  2  0 -1  3
  0 -2  0  1  0 -2 -6
	2(1) 0.0
	0(0) 0.0

-6.0 OPTIMAL [B, U, B, L, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [1.0, 4.0, 3.0, 0.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]

PrimalSimplexSolver-DenseTableau: OPTIMAL -6.0 @ { 1.0, 4.0, 3.0, 0.0, 0.0, 0.0 }


==================================================
PrimalSimplexSolver-SparseTableau
==================================================


UNEXPLORED iteration 0, partition [B, B, L, L, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [4.0, 1.0, 0.0, 0.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 1]
  1  0  1  1  1  0  4
  0  1 -1 -2  0  1  1
  0  0 -2 -3  0  0  0

getPrimalEnterCandidate
	2(0) -2.0 @ LOWER
		2.0 => 2(0) LOWER INCREASE
	3(1) -3.0 @ LOWER
		3.0 => 3(1) LOWER INCREASE
==>> 3(1) LOWER INCREASE

testPrimalExitRatio
	1(1) 3.0 / -2.0 = 1.5
	0(0) 4.0 / 1.0 = 4.0
Bound switch!
==>> -1(-1) INCREASE UPPER

Switching bounds: 3(1) LOWER INCREASE
==>> Column: 3.

UNEXPLORED iteration 1, partition [B, B, L, U, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [3.0, 3.0, 0.0, 1.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 1]
  1  0  1  1  1  0  3
  0  1 -1 -2  0  1  3
  0  0 -2 -3  0  0  0

getPrimalEnterCandidate
	2(0) -2.0 @ LOWER
		2.0 => 2(0) LOWER INCREASE
	3(1) -3.0 @ UPPER
==>> 2(0) LOWER INCREASE

testPrimalExitRatio
	1(1) 1.0 / -1.0 = 1.0
		1.0 => 1(1) INCREASE UPPER
	0(0) 3.0 / 1.0 = 3.0
==>> 1(1) INCREASE UPPER

Pivoting: 1(1) INCREASE UPPER -> 2(0) LOWER INCREASE
==>> Row: 1, Exit: 1, Column/Enter: 2.
Cost=-2.0, Pivot1=-1.0, Pivot2=-1.0, RHS=3.0, Inf=0.0
Shift Exit: 0.0, Enter: 0.0

UNEXPLORED iteration 2, partition [B, U, B, U, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [2.0, 4.0, 1.0, 1.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 2]
  1  1  0 -1  1  1  2
  0 -1  1  2  0 -1  1
  0 -2  0  1  0 -2 -6

getPrimalEnterCandidate
	1(0) -2.0 @ UPPER
	3(1) 1.0 @ UPPER
		1.0 => 3(1) UPPER DECREASE
==>> 3(1) UPPER DECREASE

testPrimalExitRatio
	2(1) 4.0 / 2.0 = 2.0
	0(0) 2.0 / -1.0 = 2.0
Bound switch!
==>> -1(-1) DECREASE LOWER

Switching bounds: 3(1) UPPER DECREASE
==>> Column: 3.

UNEXPLORED iteration 3, partition [B, U, B, L, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [1.0, 4.0, 3.0, 0.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 2]
  1  1  0 -1  1  1  1
  0 -1  1  2  0 -1  3
  0 -2  0  1  0 -2 -6

getPrimalEnterCandidate
	1(0) -2.0 @ UPPER
	3(1) 1.0 @ LOWER
==>> -1(-1) BASIS STAY

OPTIMAL iteration 3, partition [B, U, B, L, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [1.0, 4.0, 3.0, 0.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 2]
  1  1  0 -1  1  1  1
  0 -1  1  2  0 -1  3
  0 -2  0  1  0 -2 -6
	2(1) 0.0
	0(0) 0.0

-6.0 OPTIMAL [B, U, B, L, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [1.0, 4.0, 3.0, 0.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]

PrimalSimplexSolver-SparseTableau: OPTIMAL -6.0 @ { 1.0, 4.0, 3.0, 0.0, 0.0, 0.0 }


==================================================
DualSimplexSolver-RevisedStore
==================================================


UNEXPLORED iteration 0, partition [B, B, U, U, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [-2.0, 8.0, 5.0, 1.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
!!! 0.0 < -2.0 < 10.0
!!! 0.0 < 8.0 < 4.0
[0, 1]

getDualExitCandidate
	1(1) 4.0
		4.0 => 1(1) DECREASE UPPER
	0(0) -2.0
==>> 1(1) DECREASE UPPER

testDualEnterRatio
	2(0) -2.0 / -1.0 = 2.0
		2.0 => 2(0) UPPER DECREASE
	3(1) -3.0 / -2.0 = 1.5
		1.5 => 3(1) UPPER DECREASE
==>> 3(1) UPPER DECREASE

Pivoting: 1(1) DECREASE UPPER -> 3(1) UPPER DECREASE
==>> Row: 1, Exit: 1, Column/Enter: 3.
Cost=-3.0, Pivot1=-2.0, Pivot2=-2.0, RHS=8.0, Inf=4.0
Shift Exit: 0.0, Enter: 1.0
NEW iter: 3(1) DECREASE -> 1(1) DECREASE
Before update:
x: { 0.0, -2.0 }
y: { 1.0, -2.0 }
d: { -2.0, -3.0, 0.0, 0.0 }
a: { -1.0, -2.0, 0.0, 0.0 }
Update values:
exitX: -2.0, enterY: -2.0, stepX: 1.0
After update:
x: { -1.0, 1.0 }
y: { 1.0, -2.0 }
d: { -0.5, -1.5, 0.0, 0.0 }
a: { -1.0, -2.0, 0.0, 0.0 }

UNEXPLORED iteration 1, partition [B, U, U, B, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [-1.0, 4.0, 5.0, 2.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
!!! 0.0 < -1.0 < 10.0
!!! 0.0 < 2.0 < 1.0
[0, 3]

getDualExitCandidate
	3(1) 1.0
		1.0 => 3(1) DECREASE UPPER
	0(0) -1.0
==>> 3(1) DECREASE UPPER

testDualEnterRatio
	2(0) -0.5 / 0.5 = 1.7976931348623157E308
	1(1) -1.5 / -0.5 = 3.0
		3.0 => 1(1) UPPER DECREASE
==>> 1(1) UPPER DECREASE

Pivoting: 3(1) DECREASE UPPER -> 1(1) UPPER DECREASE
==>> Row: 1, Exit: 3, Column/Enter: 1.
Cost=-1.5, Pivot1=-0.5, Pivot2=-0.5, RHS=1.0, Inf=1.0
Shift Exit: 1.0, Enter: 4.0
NEW iter: 1(1) DECREASE -> 3(1) DECREASE
Before update:
x: { -1.0, 1.0 }
y: { 0.5, -0.5 }
d: { -0.5, -1.5, 0.0, 0.0 }
a: { 0.5, -0.5, 0.0, 0.0 }
Update values:
exitX: 1.0, enterY: -0.5, stepX: -2.0
After update:
x: { 0.0, -2.0 }
y: { 0.5, -0.5 }
d: { -2.0, -3.0, 0.0, 0.0 }
a: { 0.5, -0.5, 0.0, 0.0 }

UNEXPLORED iteration 2, partition [B, B, U, U, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [0.0, 2.0, 5.0, 1.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 1]

getDualExitCandidate
	1(1) 0.0
	0(0) 0.0
==>> -1(-1) STAY BASIS

FEASIBLE iteration 2, partition [B, B, U, U, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [0.0, 2.0, 5.0, 1.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]
[0, 1]
	2(0) -2.0 @ UPPER
	3(1) -3.0 @ UPPER

-13.0 OPTIMAL [B, B, U, U, L, L]
LB: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 X: [0.0, 2.0, 5.0, 1.0, 0.0, 0.0]
UB: [10.0, 4.0, 5.0, 1.0, 0.0, 0.0]

DualSimplexSolver-RevisedStore: OPTIMAL -13.0 @ { 0.0, 2.0, 5.0, 1.0, 0.0, 0.0 }

