Will inlcude ineq 1 with slack=0.0
Will inlcude ineq 2 with slack=0.0
Will inlcude ineq 3 with slack=0.0
Will inlcude ineq 4 with slack=0.0
Will inlcude ineq 5 with slack=0.0
I-slack: { 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25.0 }
Initial solution: { -0.0, -0.0, -0.0, -0.0, 25.0 }

PerformIteration 1
Last Incl/Excl: 5/-1 => [1, 2, 3, 4, 5] / [0, 6, 7, 8]
RHS=[30.999999999999993, 30.999999999999993, 30.999999999999993, -27.999999999999996, -27.999999999999996]
Relative error 5.134104839073854E-13 in solution for L=[20.999938823666533, 5.600001747580086E-9, 5.600001747580087E-9, -55.99999999999999, 20.999938818066532]
Current: 25.0 - { -0.0, -0.0, -0.0, -0.0, 25.0 }
Step: 0.0 - { 0.0, 0.0, 0.0, 0.0, 0.0 }
Included-change: { 0.0, 0.0, 0.0, 0.0, 0.0 }
Step too small!
Post iteration
	Solution: { -0.0, -0.0, -0.0, -0.0, 25.0 }
	L: { 0.0, 20.9999999888, 5.6E-9, 5.6000000000000005E-9, -56.0, 20.9999999832, 0.0, 0.0, 0.0 }
I-slack: { 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25.0 }

NeedsAnotherIteration?
Looking for the largest negative lagrange multiplier among these: [20.9999999888, 5.6E-9, 5.6000000000000005E-9, -56.0, 20.9999999832].
	Best so far: -56.0 @ 3 (4).
Suggest to exclude: -56.0 @ 3 (4).
Suggested to exclude: 4

PerformIteration 2
Last Incl/Excl: 5/4 => [1, 2, 3, 5] / [0, 4, 6, 7, 8]
RHS=[30.999999999999993, 30.999999999999993, 30.999999999999993, -27.999999999999996]
Relative error 1.3878130029142113E-12 in solution for L=[20.999893177463207, 5.6000030517524796E-9, 5.600003051752478E-9, 20.999893171863206]
Current: 25.0 - { -0.0, -0.0, -0.0, -0.0, 25.0 }
Step: 28.0 - { 28.0, 0.0, 0.0, 0.0, 0.0 }
Included-change: { 0.0, 0.0, 0.0, 0.0 }
Numer/slack: [3.0, 0.0, 0.0, 0.0, 25.0]
Denom/chang: [28.0, -28.0, 0.0, 0.0, 0.0]
Looking for the largest possible step length (smallest positive scalar) among these: [0.10714285714285714, -0.0, NaN, NaN, Infinity]).
	Best so far: 0.10714285714285714 @ 0 (0) ––– 3.0 / 28.0.
Performing update with step length 0.10714285714285714 adding constraint 0
Post iteration
	Solution: { 3.0, 0.0, 0.0, 0.0, 25.0 }
	L: { 0.0, 20.9999999888, 5.6E-9, 5.6000000000000005E-9, 0.0, 20.9999999832, 0.0, 0.0, 0.0 }
I-slack: { 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 25.0 }

NeedsAnotherIteration?
Suggested to include: 0

PerformIteration 3
Last Incl/Excl: 0/4 => [0, 1, 2, 3, 5] / [4, 6, 7, 8]
RHS=[27.999999999999993, 30.999999999999993, 30.999999999999993, 30.999999999999993, -27.999999999999996]
Relative error 3.781285435034792E-17 in solution for L=[49.999960640479586, -28.999822893358083, 5.599996064047956E-9, 5.599996064047956E-9, -28.99982289895809]
Current: 25.0 - { 3.0, 0.0, 0.0, 0.0, 25.0 }
Step: 3.7843867177544376E-5 - { 1.9679760206781083E-5, -3.7843867177544376E-5, 1.9679760216870875E-5, 1.9679760216870875E-5, -1.9679760217883313E-5 }
Included-change: { -1.1102230246251565E-14, -5.752362739542769E-5, -1.012438153062331E-15, -1.012438153062331E-15, 3.7843867177544376E-5 }
Nonzero Included-change! 5.752362739542769E-5
Step too small!
Post iteration
	Solution: { 3.0, 0.0, 0.0, 0.0, 25.0 }
	L: { 49.999960640479586, -28.999822893358083, 5.599996064047956E-9, 5.599996064047956E-9, 0.0, -28.99982289895809, 0.0, 0.0, 0.0 }
I-slack: { 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 25.0 }

NeedsAnotherIteration?
Looking for the largest negative lagrange multiplier among these: [49.999960640479586, -28.999822893358083, 5.599996064047956E-9, 5.599996064047956E-9, -28.99982289895809].
	Best so far: -28.999822893358083 @ 1 (1).
	Best so far: -28.99982289895809 @ 4 (5).
Suggest to exclude: -28.99982289895809 @ 4 (5).
Suggested to exclude: 5

PerformIteration 4
Last Incl/Excl: 0/5 => [0, 1, 2, 3] / [4, 5, 6, 7, 8]
RHS=[27.999999999999993, 30.999999999999993, 30.999999999999993, 30.999999999999993]
Relative error 1.842893225261299E-18 in solution for L=[43.55555555225184, 4.955555333444081E-9, 4.9555555552251846E-9, 4.9555555552251846E-9]
Current: 25.0 - { 3.0, 0.0, 0.0, 0.0, 25.0 }
Step: 3.2222233327795915 - { 3.2222222238740796, 3.2222233327795915, 3.2222222238740756, 3.2222222238740756, -3.2222222238740734 }
Included-change: { 6.217248937900877E-15, 1.1089055180768526E-6, 2.220446049250313E-15, 2.220446049250313E-15 }
Nonzero Included-change! 1.1089055180768526E-6
Numer/slack: [3.0, 0.0, 0.0, 0.0, 25.0]
Denom/chang: [-3.2222222238740796, -3.2222233327795915, -3.2222222238740756, -3.2222222238740756, 3.2222222238740734]
Looking for the largest possible step length (smallest positive scalar) among these: [-0.9310344822813301, -0.0, -0.0, -0.0, 7.758620685677766]).
Performing update with step length 1.0 adding constraint -1
Post iteration
	Solution: { 6.22222222387408, 3.2222233327795915, 3.2222222238740756, 3.2222222238740756, 21.777777776125927 }
	L: { 43.55555555225184, 4.955555333444081E-9, 4.9555555552251846E-9, 4.9555555552251846E-9, 0.0, 0.0, 0.0, 0.0, 0.0 }
I-slack: { -7.105427357601002E-15, -1.1089055185209418E-6, -3.552713678800501E-15, -3.552713678800501E-15, 6.22222222387408, 3.2222233327795915, 3.2222222238740756, 3.2222222238740756, 21.777777776125927 }
Negative I-slack! -1.1089055185209418E-6

NeedsAnotherIteration?
Looking for the largest negative lagrange multiplier among these: [43.55555555225184, 4.955555333444081E-9, 4.9555555552251846E-9, 4.9555555552251846E-9].
Nothing to exclude
Stop!
